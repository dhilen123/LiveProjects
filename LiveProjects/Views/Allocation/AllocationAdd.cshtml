@model LiveProjects.Models.Allocation@{    ViewBag.Title = "AllocationAdd";}<link href="~/css/Registration.css" rel="stylesheet" />@using (Html.BeginForm()){@Html.AntiForgeryToken()@Html.ValidationSummary(true, "", new { @class = "text-danger" })<h5 class="mt-5">Sigma Solve Allocation Management</h5><fieldset class="mt-4">    <legend>        Details    </legend>    <div class="container form-container p-5">        <form>            <div class="row">                <div class="col-md-5">                    <div class="form-group fw-bold ms-5">                        @{                            List<SelectListItem> data = ViewBag.ProjectList;                        }                        @Html.LabelFor(model => model.projId)<label class="text-danger">*</label>                        @Html.DropDownListFor(model => model.projId, data, "---Select---", new { @class = "form-control mt-2" })                        @Html.ValidationMessageFor(model => model.projId, "", new { @class = "text-danger" })                    </div>                    <div class="form-group fw-bold mt-3 ms-5">                        @{                            List<SelectListItem> data1 = ViewBag.ResourceList;                        }                        @Html.LabelFor(model => model.resId)<label class="text-danger">*</label>                        @Html.DropDownListFor(model => model.resId, data1, "---Select---", new { @class = "form-control mt-2" })                        @Html.ValidationMessageFor(model => model.resId, "", new { @class = "text-danger" })                    </div>                    <div class="form-group fw-bold mt-3 ms-5">                        @Html.LabelFor(model => model.startDate)<label class="text-danger">*</label>                        @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control mt-2", @min = DateTime.Now.ToString("yyyy-MM-dd") } })                        @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })                    </div>                    <div class="form-group fw-bold mt-3 ms-5">                        @Html.LabelFor(model => model.endDate)<label class="text-danger">*</label>                        @Html.EditorFor(model => model.endDate, new { htmlAttributes = new { @class = "form-control mt-2", @min = DateTime.Now.ToString("yyyy-MM-dd") } })                        @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })                    </div>                    <div class="form-group fw-bold ms-5">                        @Html.Label("allocation")<label class="text-danger">*</label>                        @Html.EditorFor(model => model.allocation1, new { htmlAttributes = new { @class = "form-control mt-2" } })                        @Html.ValidationMessageFor(model => model.allocation1, "", new { @class = "text-danger" })                    </div>                </div>                <div class="col-md-7">                    <div class="form-group fw-bold ms-5">                        @Html.LabelFor(model => model.isBillable)<label class="text-danger">*</label>                        @Html.DropDownListFor(model => model.isBillable, new List<SelectListItem>{                            new SelectListItem { Text = "True", Value = "true" },                            new SelectListItem { Text = "False", Value = "false" }                        }, "--Select--", new { @class = "form-control mt-2", placeholder = "Select Billable" })                        @Html.ValidationMessageFor(model => model.isBillable, "", new { @class = "text-danger" })                    </div>                    <div class="form-group fw-bold mt-3 ms-5">                        <div class="form-group" style="padding-top:5px;">                            <label>Technology Group</label><label class="text-danger">*</label>                            <select class="form-control" id="technologyGroup" name="techGroup" required>                                <option value="-1"></option>                            </select>                            <div id="techGroupValidation"></div>                        </div>                    </div>                    <div class="form-group fw-bold ms-5">                        <div class="form-group" style="padding-top:20px">                            <label>Technology</label><label class="text-danger">*</label>                            <select class="form-control" id="primaryTechnology" name="technology" required>                                <option value="-1">Select Technology</option>                            </select>                            <div id="countryValidation"></div>                        </div>                    </div>                    <div class="form-group fw-bold mt-3 ms-5">                        @{                            List<SelectListItem> data3 = ViewBag.RoleList;                        }                        @Html.LabelFor(model => model.role)<label class="text-danger">*</label>                        @Html.DropDownListFor(model => model.role, data3, "---Select---", new { @class = "form-control mt-2" })                        @Html.ValidationMessageFor(model => model.role, "", new { @class = "text-danger" })                    </div>                </div>                <div class="form-group">                    <div class="row">                        <div class="col-md-12">                            <div class="form-group mt-4">                                <input type="submit" value="Save" class="btn mb-3 ms-5 text-dark" style="background-color: #82E0AA;" />                                <input type="reset" value="Reset" class="btn mb-3 ms-1 text-dark" style="background-color: #F08080;" />                                <span><a href="Allocation" class="btn btn-primary ms-1 mb-3 text-dark" role="button">Back to List</a></span>                            </div>                        </div>                    </div>                </div>            </div>        </form>    </div></fieldset>}@section Scripts{    <script>        document.addEventListener('DOMContentLoaded', function () {            const startDateInput = document.getElementById('startDate');            const endDateInput = document.getElementById('endDate');                        function validateDateInput(input, fieldName) {                const selectedDate = new Date(input.value);                const today = new Date();                today.setHours(0, 0, 0, 0); // Remove the time part for comparison                if (selectedDate < today) {                    alert('Please enter the current date or a future date for ' + fieldName + '.');                    input.value = ''; // Clear the input field                }            }                        startDateInput.addEventListener('change', function () {                validateDateInput(startDateInput, 'Start Date');            });                       endDateInput.addEventListener('change', function () {                validateDateInput(endDateInput, 'End Date');            });        });        function getGroupTechnology() {            $.ajax({                type: "GET",                url: "/Allocation/getGroupTechnology",                success: function (data) {                    var s = '<option value="-1">Select TechnologyGroup</option>';                    for (var i = 0; i < data.length; i++) {                        s += '<option value="' + data[i].techGroupId + '">' + data[i].techGroupName + '</option>';                    }                    $("#technologyGroup").html(s);                }            });        }        $(document).ready(function () {            getGroupTechnology();            $("#technologyGroup").change(function () {                var TechID = $("#technologyGroup").val();                $.ajax({                    type: "GET",                    url: "/Allocation/Technologies",                    data: { TechID: TechID },                    success: function (data) {                        var s = '<option value="-1" > Select Primary Technology</option> ';                        for (var i = 0; i < data.length; i++) {                            s += '<option value="' + data[i].techId + '">' + data[i].techName + '</option>'                        }                        $("#primaryTechnology").html(s);                    }                });            });            $('form').submit(function (event) {                var selectedCountry = $('#primaryTechnology').val();                if (selectedCountry == null || selectedCountry === '-1') {                    event.preventDefault();                     $('#countryValidation').text('Please select a primary technology.').addClass('text-danger');                } else {                    $('#countryValidation').text('').removeClass('text-danger');                }            });            $('form').submit(function (event) {                var selectedCountry = $('#technologyGroup').val();                if (selectedCountry == null || selectedCountry === '-1') {                    event.preventDefault();                     $('#techGroupValidation').text('Please select a technology group.').addClass('text-danger');                } else {                    $('#techGroupValidation').text('').removeClass('text-danger');                }            });        });    </script>}